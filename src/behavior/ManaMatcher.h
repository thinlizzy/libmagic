#ifndef MANAMATCHER_H_LIBMAGIC_2015_17_05
#define MANAMATCHER_H_LIBMAGIC_2015_17_05

#include "../board/ManaPool.h"
#include "../cards/Cost.h"
#include <vector>

namespace mtg {

class ManaMatcher {
public:
	using Life = unsigned;
	struct Solution {
		std::vector<ManaPool::ManaCRef> mana;
		Life life;
		bool operator==(Solution const & sol) const { return mana == sol.mana && life == sol.life; }
	};
	using Solutions = std::vector<Solution>;
private:
	Solutions solutions;
	size_t maxSolutions;

	// TODO consider refactoring the vars below and associated functions to separate classes

	// for the permutations
	Cost::Symbols currentMatcher;
	// for the matcher
	ManaPool::ManaSet visited;
	Life life;
public:
	ManaMatcher(size_t maxSolutions = 1);
	// annotations argument is generated by someFunction(gameStep, sourceOfCost)
	ManaMatcher & match(Cost const & cost, ManaPool const & manaPool, Mana::Annotations annotations = 0);
	explicit operator bool() const { return ! solutions.empty(); }
	Solutions const & getSolutions() const { return solutions; }
private:
	bool tryPermutations(unsigned pos, Cost::Symbols const & symbols, ManaPool const & manaPool, Mana::Annotations annotations);
	bool doMatch(Cost::Symbols::const_iterator costIt, Cost::Symbols::const_iterator costEnd,
			ManaPool const & manaPool, Mana::Annotations annotations);
};

} /* namespace mtg */

#endif /* MANAMATCHER_H_ */
